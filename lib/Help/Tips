"The tip of the day dialog offers you valuable tips on Visual Tcl"

{The main window gives access to common functions like open, save,
close, cut, copy, paste.

Below the menu bar, a number of buttons allow you to quickly change
the visual properties of a widget such as the border width, the
relief (sunken, raised), or the position of the text (left, center,
right, etc.).

You can also set the font type and size from the main window.}

{The Tk Toolkit has different ways of arranging widgets inside a
window. Geometry managers are responsible for arranging widgets.

Tk has three geometry managers available.

Visual Tcl supports all three geometry managers. You may need to
use one or the other depending on your needs.}

{One of the geometry managers is the "packer".

The packer arranges widgets so that they can expand or contract,
automatically adjusting their size. Widgets can stick to a given
side of the window, and they can be instructed to expand horizon-
tally, vertically or both.

The packer is very convenient because you don't have to worry
how big the buttons are. They will adjust so the button text fits.

On the other hand, the packer requires a little bit of thinking
while you design your forms, but because of its flexibility,
it is the best choice to quickly port your application to
other platforms.}

{Another geometry manager is called the "placer".

The placer simply places widgets to particular positions inside
a window by using a system of x, y coordinates. Each widget is
given a specific position (x, y) and a size (width, height).

The placer does not resize widgets according to their content,
which means that if you change the font size, buttons won't
resize, contrary to the packer.}

{It is recommended that you use the packer, to ensure that your
application will have a consistent look, regardless of platform
or font size. However, you may need to use the placer in some
situations.}

{A very useful geometry manager is the "gridder".

The gridder arranges items in a grid of rows and columns. All
items in the same row have the same height, and all items in the
same column have the same width.

In addition, an item in a grid can span on more than one column,
or more than one row.

Rows and columns automatically adjust to the contents of the
widgets, like the packer. Rows and columns expand or contract.}

{The vertical window containing two rows of icons in Visual
Tcl is known as the toolbar. It is a palette of visual elements
that you can use to build your application.

Visual Tcl refers to visual elements with which the user interacts
or that offer visual information to the user as 'widgets'. A widget
may be a button (you can interact with a button by clicking on it),
a scrollbar (you can drag the bar up or down to browse through
a long text for example), a label (you cannot interact with a
label, but the label displays text in a window), or a entry field
(you can enter a value inside an entry field). There are many
widgets for you to use in Visual Tcl.

All these widgets (visual elements) form the building blocks of
your application.}

{Visual Tcl has two modes:

EDIT mode allows you to place widgets on forms, move them around,
change their size, their color, their font, how they respond
to events, etc.

TEST mode does not allow you to place widgets, but enables you
to interact with them, as if you were running your application
outside Visual Tcl.}

{Widgets in Tk are characterized by their properties.

A property can be a font, a background color, a border size,
a text string, anything that defines the behavior and appearance
of a widget.

You customize widgets to your own liking by changing their
properties. For example, you set the background color, you change
the font, or you define a command when a button is pressed.}

{Widgets with a similar behavior and appearance belong to the
same class.

For example, widgets of the "Button" class all look rectangular
with a text inside. They all execute a command when you click on
them.

Widgets of the "Scrollbar" class are made to browse through
large documents. They all look like an elevator where you could
drag the car up or down from one story to the other.

Widgets of the "Text" class allow you to display text or
modify it by inserting characters, copying or pasting bits of
text.}

{The basic building block of an application in Visual Tcl is
the form, also called a "toplevel" window. Think of a toplevel
window as an interactive form, displaying information to the
user, or allowing the user to enter data.}

"Aliases are symbolic names used to refer to widgets."

"You can access a widget by it's alias using $widget(MyWidget)"

{
If you enable 'Widget command aliasing' in the Preferences dialog,
you can refer to a widget by a command named after it's alias.

For instance, if your alias is "MyButton", you can type:

MyButton configure -state disabled
}

{
To refer to aliased widgets inside a toplevel that also has an alias,
you can use a command composed by adding the toplevel's alias,
a period, and the widget's alias.

For instance, if your toplevel alias is "MyToplevel", and
your widget alias is "MyLabel", you can type:

MyToplevel.MyLabel configure -text "MyLabel"
}

{
Aliases make it very easy to refer to widgets in different toplevels.

Suppose that you have top toplevels aliased Top1 and Top2.
Suppose that each of these toplevel has a button aliased MyButton.

You can use:
Top1.MyButton

and:
Top2.MyButton
}

{
If you need to get the window path name for an aliased widget
inside an aliased toplevel, use the global variable widget.

Suppose that you have an toplevel aliased Top1, and a
widget whose alias is MyWidget. Then you can write:

# inside a procedure, make sure you make widget global
global widget

...     $widget(Top1,MyWidget)       ...
}

{
When creating a compound, all procedures inside a namespace named
after the compound will be part of the compound.

For example, suppose the following procedures are defined:

::MyCompound::init
::MyCompound::main
::MyCompound::stuff

Creating a compound named "MyCompound" will include all the
procedures above.
}

{
There are 2 special procedures with every compound. If this/these
procedure(s) exist(s), it(they) will be called with the name of the 
window as parameter.

These procedures are, for a compound named "MyCompound":
::MyCompound::init
::MyCompound::main

The init procedure will be called before the compound widgets are
created.

The main procedure will be invoked after all the compound's widgets 
have been defined.
}

{
When you create a compound, you may want to refer to its 
subwidgets. You can check the "Ask for widget name on insert"
option in the "Preferences" dialog. Then, everytime you insert
a new widget, you will be prompted for a name.

This is convenient to refer to subwidgets inside a compound with
symbolic names instead of automatically generated names.

It's easier to write
%W.leftframe

than
%W.frame03
}

{
To change the order of widgets arranged with the "pack" geometry
manager, activate the widget you want to move by clicking on it,
then press the Left/Up, Right/Down keys to change its order.
}

{
To move a widget around in a grid, activate it by clicking on it,
then use the cursor keys.
}

{
In some situations you want to insert a widget inside a frame, but
you have a hard time selecting the frame in the toplevel, because
it is completely filled with widgets.

Visual Tcl allows you to select the insertion point in the widget
tree (say, a frame) then place the new widget inside it by pressing
the Shift key then clicking on the widget you want to insert in
the toolbar.
}
