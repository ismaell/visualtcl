Class		Panedwindow
Lib		itcl

CreateCmd	::iwidgets::panedwindow
Icon		icon_panedwindow.gif
DumpChildren	no
MegaWidget	yes
TreeChildrenCmd	{
		vTcl:widget:panedwindow:treeChildrenCmd
		vTcl:widget:panedwindow:treeChildrenChildsite
		}
DumpCmd		vTcl:dump:panedwindow
InsertCmd	vTcl:widget:panedwindow:inscmd
TagsCmd         vTcl:widget:panedwindow:tagscmd
CompoundCmd     vTcl:compound:panedwindow

AdditionalClasses Pane

proc vTcl:widget:panedwindow:inscmd {target} {
    return "$target add pane1; $target add pane2"
}

proc vTcl:widget:panedwindow:tagscmd {target} {

    global vTcl

    # workaround for special binding tags in IWidgets
    set tags $vTcl(bindtags,$target)
    set special1 [lsearch -glob $tags pw-config-*]
    set special2 [lsearch -glob $tags itk-delete-*]

    set class [winfo class $target]
    set toplevel [winfo toplevel $target]
    set result ""

    if {$special1 != -1} {
        lappend result [lindex $tags $special1]
    }
    if {$special2 != -1} {
        lappend result [lindex $tags $special2]
    }

    lappend result $target $class $toplevel all
    return $result
}

# All right, I explain it: -1 is the number of levels
# in the window path between the megawidget and its
# pages (childsites). This is used by the widget tree
# to skip 4 levels (otherwise it would draw 4 vertical
# lines)

proc vTcl:widget:panedwindow:treeChildrenCmd {target {diff \#-1}} {

    set children ""
    set wantsdiff [expr {$diff != ""}]

    foreach site [$target childsite] {
        foreach child [vTcl:complete_widget_tree $site $wantsdiff] {
            lappend children $child$diff
        }
    }

    return $children
}

proc vTcl:widget:panedwindow:treeChildrenChildsite {target} {

    return [$target childsite]
}

proc vTcl:dump:panedwindow {target basename} {

    global vTcl
    set result [vTcl:dump_widget_opt $target $basename]
    set entries [$target childsite]
    set size [llength $entries]
    for {set i 0} {$i < $size} {incr i} {
        set conf [$target paneconfigure $i]
        set pairs [vTcl:conf_to_pairs $conf ""]
        append result "$vTcl(tab)$basename add pane$i \\\n"
        append result "[vTcl:clean_pairs $pairs]\n"
    }
    foreach page $entries {
        append result [vTcl:lib_itcl:dump_subwidgets $page]
    }
    return $result
}

## this function returns the necessary code to insert all
## the childsites into the panedwindow widget (basically
## the returned code will be stored in a compound)
##
## the returned code makes the body of a procedure whose
## parameter is 'target'; to insert the childsites into the
## compound, this procedure should be called with target
## pointing to the new widget

proc vTcl:compound:panedwindow {target} {
    set result ""

    set entries [$target childsite]
    set size [llength $entries]
    for {set i 0} {$i < $size} {incr i} {
        set conf [$target paneconfigure $i]
        set pairs [vTcl:conf_to_pairs $conf ""]
        append result "set site($i) \[\$target add pane$i $pairs\]; "
    }

    ## we have to ask for the childsites list, because the add
    ## command doesn't seem to be returning the correct path to the
    ## pane it just added

    for {set i 0} {$i < $size} {incr i} {
        set compound [vTcl:create_compound [lindex $entries $i]]
        append result "vTcl:insert_compound "
        append result "\[lindex \[\$target childsite\] $i\] [list $compound] pack \{\}; "
    }

    return $result
}
