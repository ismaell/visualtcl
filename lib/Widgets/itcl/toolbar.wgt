##############################################################################
#
# Visual TCL - A cross-platform application development environment
#
# Copyright (C) 2001 Christian Gavin
#
# Description file for [Incr Widgets]
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

##############################################################################
#

Class		Toolbar
Lib		itcl

CreateCmd	::iwidgets::toolbar
Icon		icon_toolbar.gif
DumpChildren	no
MegaWidget	yes
TagsCmd         vTcl:lib_itcl:tagscmd
InsertCmd       vTcl:widget:toolbar:inscmd
DumpCmd         vTcl:dump:toolbar
CompoundCmd     vTcl:compound:toolbar

proc vTcl:widget:toolbar:inscmd {target} {

    global env

    $target add button open \
        -balloonstr "Open" \
        -image [vTcl:image:get_image $env(VTCL_HOME)/images/edit/open.gif] \
        -command {tk_messageBox -message {TODO: Open Command handler here!}}
    $target add button save \
        -balloonstr "Save" \
        -image [vTcl:image:get_image $env(VTCL_HOME)/images/edit/save.gif] \
        -command {tk_messageBox -message {TODO: Save Command handler here!}}
}

proc vTcl:dump:toolbar {target basename} {

    global vTcl
    set result [vTcl:dump_widget_opt $target $basename]

    set components [$target component]
    foreach component $components {
        if {$component == "hull"} {continue}

        set path [$target component $component]
        set class [vTcl:get_class $path]

        set conf [$target itemconfigure $component]
        set pairs [vTcl:get_opts_special $conf $target \
                "-text -command -image -balloonstr"]

        append result "$vTcl(tab)$basename add [string tolower $class]"
        append result " $component \\\n"
        append result "[vTcl:clean_pairs $pairs]\n"
    }

    return $result
}

## this function returns the necessary code to insert all
## the buttons into the toolbar widget (basically, the returned
## code will be stored in a compound)

proc vTcl:compound:toolbar {target} {
    set result ""

    set components [$target component]
    foreach component $components {
        if {$component == "hull"} {continue}

        set path [$target component $component]
        set class [string tolower [vTcl:get_class $path]]

        set conf [$target itemconfigure $component]
        set pairs [vTcl:conf_to_pairs $conf ""]

        append result "\$target add $class $component $pairs\n"
    }

    return $result
}