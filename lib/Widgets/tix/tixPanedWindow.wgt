Name            tixPanedWindow
Lib             tix

Class           TixPanedWindow
Icon            icon_tixPanedWindow.gif
TreeLabel       Tix PanedWindow
DefaultOptions  -orient vertical
DumpCmd         vTcl:dump:TixPanedWindow
CompoundCmd     vTcl:compound:tixPanedWindow
DumpChildren    no
MegaWidget      yes
InsertCmd       vTcl:widget:tixPanedWindow:inscmd
DeleteSiteCmd   vTcl:widget:tixPanedWindow:deleteSiteCmd
TreeChildrenCmd     "vTcl:widget:tixPanedWindow:treeChildrenCmd \
                     vTcl:widget:tixPanedWindow:treeChildrenChildsite"

proc vTcl:widget:tixPanedWindow:inscmd {target} {
    # Add two pages to start with.  Unfortunately, additional pages have
    # to be added manually by the user, and the project re-read into vtcl.
    return "
        $target add page1
        $target add page2
        $target subwidget page1 configure -width 30 -height 30;
        $target subwidget page2 configure -width 30 -height 30;
    "
}

proc vTcl:widget:tixPanedWindow:treeChildrenCmd {target {diff ""}} {

    set children ""
    set wantsdiff [expr {$diff != ""}]

    set entries [$target panes]
    foreach pane $entries {
        set site [$target subwidget $pane]
        foreach child [vTcl:complete_widget_tree $site $wantsdiff] {
            lappend children $child$diff
        }
    }

    return $children
}

proc vTcl:widget:tixPanedWindow:treeChildrenChildsite {target} {

    set entries [$target panes]
    set sites ""

    foreach pane $entries {
        lappend sites [$target subwidget $pane]
    }

    return $sites
}

proc vTcl:widget:tixPanedWindow:deleteSiteCmd {target site} {

    set entries [$target panes]

    foreach page $entries {
        set subwidget [$target subwidget $page]
        if {$site == $subwidget} {
            $target delete $page
            return
        }
    }
}

proc vTcl:dump:TixPanedWindow {target basename} {
    global vTcl
    set result [vTcl:dump_widget_opt $target $basename]
    set entries [$target panes]
    foreach page $entries {
        set conf [$target paneconfigure $page]
        foreach c $conf {
            # Filter the valid options out
            if [regexp -- {^-(after|allow|at|before|expand|max|min|size)} $c] {
                lappend validcfg $c
            }
        }
        set pairs [vTcl:conf_to_pairs $validcfg ""]
        append result "$vTcl(tab)$basename add $page \\\n"
        append result "[vTcl:clean_pairs $pairs]\n"
    }
    set index 0
    foreach page $entries {
        set subwidget [$target subwidget $page]
        set sitevariable "site_[llength [split $subwidget .]]_[vTcl:rename $page]"
        append result "$vTcl(tab)"
        append result "set $sitevariable "
        append result "\[$basename subwidget \[lindex \[$basename panes\] $index\]\]\n"
        append result [vTcl:lib_tix:dump_subwidgets $subwidget \$$sitevariable]
        incr index
    }
    return $result
}

proc vTcl:compound:tixPanedWindow {target} {
    set result ""

    set entries [$target panes]

    foreach page $entries {
        set conf [$target paneconfigure $page]
        foreach c $conf {
            # Filter the valid options out
            if [regexp -- {^-(after|allow|at|before|expand|max|min|size)} $c] {
                lappend validcfg $c
            }
        }
        set pairs [vTcl:conf_to_pairs $validcfg ""]
        append result "\$target add $page $pairs; "
    }

    foreach page $entries {
        set compound [vTcl:create_compound [$target subwidget $page]]
        append result "vTcl:insert_compound "
        append result "\[\$target subwidget $page\] [list $compound] pack \{\}; "
    }

    return $result
}
