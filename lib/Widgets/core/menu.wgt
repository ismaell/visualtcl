##############################################################################
#
# Visual TCL - A cross-platform application development environment
#
# Copyright (C) 2001 Damon Courtney
#
# Description file for Tk Widget
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

##############################################################################
#

Class       Menu
Lib         core

Icon        icon_menu.gif
TreeLabel   @vTcl:core:get_menu_label
DefaultValues -background

NewOption -menuspecial      "menu"          menuspecial
NewOption -tearoff          "tearoff"       boolean "0 1"
NewOption -postcommand      "post cmd"      command
NewOption -tearoffcommand   "tearoff cmd"   command
NewOption -title            "title"         type

DeleteCmd  vTcl:Menu:delete_menu
GetImagesCmd vTcl::widgets::core::menu::getImagesCmd
GetFontsCmd  vTcl::widgets::core::menu::getFontsCmd

proc vTcl:Menu:delete_menu {m} {

    # this will be used later
    set editor [::menu_edit::is_open_existing_editor $m]

    ::menu_edit::delete_menu_recurse $m

    # well, this is not enough to destroy the menu itself,
    # we better tell its parent that it's not there as well

    set items [split $m .]
    set items [lrange $items 0 [expr [llength $items] - 2] ]

    set parent [join $items .]

    # now, let's see if the parent contains the child menu (should)

    set class [vTcl:get_class $parent]
    if {$class == "Toplevel"} then {
        # it's a toplevel, just removes its menu
        $parent configure -menu ""

        # closes any open menu editor for this menu
        if {$editor != ""} {
            destroy $editor}

        return
    }

    if {$class != "Menu"} then return

    set last [$parent index end]

    for {set i 0} {$i <= $last} {incr i} {
        set mtype [$parent type $i]
        if {$mtype != "cascade"} then continue

        set submenu [$parent entrycget $i -menu]
        if {$submenu == $m} then {
            # this is the one
            $parent delete $i
            break
        }
    }

    # now, we will refresh any possibly open menu editor

    if {$editor != ""} {
        ::menu_edit::refreshes_existing_editor $editor
    }
}

namespace eval vTcl::widgets::core::menu {

    proc getImagesCmd {target} {
        set result {}
        set size [$target index end]
        if {[vTcl:streq $size "none"]} { continue }
        for {set i 0} {$i <= $size} {incr i} {
	    if {![catch {$target entrycget $i -image} image]} {
                lappend result $image
            }
        }
        return $result
    }

    proc getFontsCmd {target} {
        ## fonts not yet supported in menu editor
        return {}
    }
}
