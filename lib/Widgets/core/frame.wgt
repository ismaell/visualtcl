Class		Frame
Lib		core

Icon		icon_frame.gif
DefaultOptions	-bd 2 -relief groove -width 125 -height 75
DefaultValues   -background -highlightbackground -highlightcolor
TreeLabel	Frame
DeleteCmd       vTcl:Frame:delete
SelectCmd       vTcl:Frame:select

proc vTcl:Frame:containing_megawidget {target} {

    global classes

    set path ""
    if {[vTcl:WidgetVar [winfo parent $target] parent tmp]} {
        set path $tmp
    }

    if {$path == ""} {return ""}

    set class [vTcl:get_class $path]
    if {[info exists classes($class,megaWidget)] &&
        $classes($class,megaWidget)} {

        # it is a megawidget, ask for its childsites
        set childsiteCmd [lindex $classes($class,treeChildrenCmd) 1]

        # no childsites in megawidget ? shouldn't happen at this point but...
        if {$childsiteCmd == ""} {return ""}

        set sites [$childsiteCmd $path]

        # is it a child site of this megawidget ?
        if {[lsearch -exact $sites $target] != -1} {return $path}
    }

    # wasn't a megawidget's childsite
    return ""
}

proc vTcl:Frame:delete {target} {

    global classes

    # Let's go up levels until we find a megawidget. If we
    # find one, we ask for its childsites, and if the frame is
    # one of them, we ask the megawidget to delete it's childsite

    set megawidget [vTcl:Frame:containing_megawidget $target]

    if {$megawidget == ""} {
        destroy $target
        return
    }

    # yes it is a childsite, ask to delete
    set class [vTcl:get_class $megawidget]
    if {$classes($class,deleteSiteCmd) != ""} {
        $classes($class,deleteSiteCmd) $megawidget $target
    }
}

proc vTcl:Frame:select {target} {

    global classes

    set megawidget [vTcl:Frame:containing_megawidget $target]

    if {$megawidget == ""} {
        return
    }

    set class [vTcl:get_class $megawidget]
    if {$classes($class,selectSiteCmd) != ""} {
        $classes($class,selectSiteCmd) $megawidget $target
    }
}
