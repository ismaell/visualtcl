##############################################################################
#
# Visual TCL - A cross-platform application development environment
#
# Copyright (C) 2001 Damon Courtney
#
# Description file for Tk Widget
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

##############################################################################
#

Class		Toplevel
Lib		core

Icon		icon_toplevel.gif
CreateCmd       vTcl:toplevel
DoubleClickCmd	vTcl::widgets::core::toplevel::dblClkCmd

TreeLabel	@vTcl::widgets::core::toplevel::getWidgetTreeLabel
InsertCmd	vTcl::widgets::core::toplevel::insertCmd
DeleteCmd       vTcl::widgets::core::toplevel::deleteCmd
WidgetProc	vTcl:Toplevel:WidgetProc
DefaultValues   -background -highlightbackground -highlightcolor

Function        "Edit Menu..."              vTcl::widgets::core::toplevel::editMenu
Function	"Set New Toplevel Geometry" vTcl::widgets::core::toplevel::setNewGeom
Function        "Adjust Size To Children"   vTcl::widgets::core::toplevel::adjustSize

Export          vTcl:DefineAlias
Export          vTcl:toplevel
Export          vTcl:DoCmdOption
Export          vTcl:FireEvent

proc vTcl:DoCmdOption {target cmd} {

    ## menus are considered toplevel windows
    set parent $target
    while {[winfo class $parent] == "Menu"} {
        set parent [winfo parent $parent]
    }

    regsub -all {\%widget} $cmd $target cmd
    regsub -all {\%top} $cmd [winfo toplevel $parent] cmd

    uplevel #0 [list eval $cmd]
}

proc vTcl:toplevel {args} {
    uplevel #0 eval toplevel $args
    set target [lindex $args 0]
    namespace eval ::$target {}
}

proc vTcl:Toplevel:WidgetProc {w args} {
    if {[llength $args] == 0} {
        ## If no arguments, returns the path the alias points to
        return $w
    }
    ## The first argument is a switch, they must be doing a configure.
    if {[string index $args 0] == "-"} {
        set command configure
        ## There's only one argument, must be a cget.
        if {[llength $args] == 1} {
            set command cget
        }
    } else {
        set command [lindex $args 0]
        set args [lrange $args 1 end]
    }
    switch -- $command {
        "hide" - "Hide" - "show" - "Show" {
            Window [string tolower $command] $w
        }
        "ShowModal" {
            Window show $w
            raise $w
            grab $w
            tkwait window $w
            grab release $w
        }
        default {
            uplevel $w $command $args
        }
    }
}

namespace eval vTcl::widgets::core::toplevel {

    proc getWidgetTreeLabel {target} {
        return [wm title $target]
    }

    proc editMenu {} {
    	dblClkCmd $::vTcl(w,widget)
    }

    proc dblClkCmd {target} {
        global vTcl
        set vTcl(w,opt,-menu) [$target cget -menu]
        vTcl:edit_target_menu $target

	# this is necessary in order for the -menu option to be set right now
	update

        vTcl:prop:save_opt $target -menu vTcl(w,opt,-menu)
    }

    proc setBindings {} {

    	bind _TopLevel <<Create>> {
	    if {![info exists _topcount]} {set _topcount 0}; incr _topcount
        }

        bind _TopLevel <Destroy> {
            if {[winfo toplevel %W] == "%W"} {incr _topcount -1}
        }

        bind _TopLevel <<DeleteWindow>> {
            destroy %W; if {$_topcount == 0} {exit}
        }
    }

    proc insertCmd {target} {
        global vTcl

        wm geometry $target $vTcl(pr,geom_new)
        wm protocol $target WM_DELETE_WINDOW "vTcl:hide_top $target"
        if {$vTcl(pr,winfocus) == 1} {
            wm protocol $target WM_TAKE_FOCUS "vTcl:wm_take_focus $target"
        }
        wm title $target "New Toplevel $vTcl(newtops)"
        incr vTcl(newtops)
        set vTcl(w,insert) $target
        lappend vTcl(tops) $target
        vTcl:update_top_list
        setBindings
        bindtags $target [concat [bindtags $target] _TopLevel]
        ::widgets_bindings::add_tag_to_tagslist _TopLevel
        vTcl:FireEvent $target <<Create>>
    }

    proc deleteCmd {target} {
        global vTcl

        set vTcl(tops) [lremove $vTcl(tops) $target]
        destroy $target
        namespace delete ::$target
        vTcl:update_top_list
    }

    proc adjustSize {} {
        global vTcl

        wm geometry $vTcl(w,widget) {}
    }

    proc setNewGeom {} {
        global vTcl

        set vTcl(pr,geom_new) [wm geometry $vTcl(w,widget)]
    }
}