Class		Toplevel
Lib		core

Icon		icon_toplevel.gif
CreateCmd   vTcl:toplevel
DoubleClickCmd	vTcl:widget:toplevel:dblclkcmd

TreeLabel	@vTcl:core:get_widget_tree_label
InsertCmd	vTcl:widget:toplevel:inscmd
DeleteCmd       vTcl:widget:toplevel:deletecmd
WidgetProc	vTcl:Toplevel:WidgetProc
DefaultValues   -background -highlightbackground -highlightcolor

Function        "Edit Menu..."              vTcl:widget:toplevel:edit_menu
Function	"Set New Toplevel Geometry" vTcl:widget:toplevel:set_new_geom
Function        "Adjust Size To Children"   vTcl:widget:toplevel:adjust_size

Export          vTcl:DefineAlias
Export          vTcl:toplevel
Export          vTcl:DoCmdOption

proc vTcl:DoCmdOption {target cmd} {

    ## menus are considered toplevel windows
    set parent $target
    while {[winfo class $parent] == "Menu"} {
        set parent [winfo parent $parent]
    }

    regsub -all {\%widget} $cmd $target cmd
    regsub -all {\%top} $cmd [winfo toplevel $parent] cmd

    uplevel #0 [list eval $cmd]
}

proc vTcl:toplevel {args} {
    uplevel #0 eval toplevel $args
    set target [lindex $args 0]
    namespace eval ::$target {}
}

proc vTcl:widget:toplevel:edit_menu {} {
    global vTcl
    vTcl:widget:toplevel:dblclkcmd $vTcl(w,widget)
}

proc vTcl:widget:toplevel:dblclkcmd {target} {
    global vTcl
    set vTcl(w,opt,-menu) [$target cget -menu]
    vTcl:edit_target_menu $target
    vTcl:prop:save_opt $target -menu vTcl(w,opt,-menu)
}

proc vTcl:widget:toplevel:inscmd {target} {
    global vTcl
    return "
    	wm geometry $target $vTcl(pr,geom_new)
	wm protocol $target WM_DELETE_WINDOW {vTcl:hide_top $target}
	if {$vTcl(pr,winfocus) == 1} {
	    wm protocol $target WM_TAKE_FOCUS {vTcl:wm_take_focus $target}
	}
	wm title $target \"New Toplevel $vTcl(newtops)\"
	incr vTcl(newtops)
	set vTcl(w,insert) $target
	lappend vTcl(tops) $target
	vTcl:update_top_list
    "
}

proc vTcl:widget:toplevel:deletecmd {target} {
    global vTcl

    set vTcl(tops) [lremove $vTcl(tops) $target]
    destroy $target
    namespace delete ::$target
    vTcl:update_top_list
}

proc vTcl:widget:toplevel:adjust_size {} {
    global vTcl

    wm geometry $vTcl(w,widget) {}
}

proc vTcl:widget:toplevel:set_new_geom {} {
    global vTcl

    set vTcl(pr,geom_new) [wm geometry $vTcl(w,widget)]
}

proc vTcl:Toplevel:WidgetProc {w args} {
    if {[llength $args] == 0} {
        return -code error "wrong # args: should be \"$w option ?arg arg ...?\""
    }

    ## The first argument is a switch, they must be doing a configure.
    if {[string index $args 0] == "-"} {
        set command configure

        ## There's only one argument, must be a cget.
        if {[llength $args] == 1} {
            set command cget
        }
    } else {
        set command [lindex $args 0]
        set args [lrange $args 1 end]
    }

    switch -- $command {
        "hide" -
        "Hide" {
            Window hide $w
        }

        "show" -
        "Show" {
            Window show $w
        }

        "ShowModal" {
            Window show $w
            raise $w
            grab $w
            tkwait window $w
            grab release $w
        }

        default {
            eval $w $command $args
        }
    }
}
